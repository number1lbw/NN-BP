clc;clear;
global T;
global labda;
T=300;num_iters=T;%设置迭代步数
labda=0.1;%设置正则化参数
input_layer_size  = 784;
hidden_layer_size = 25;   % 25 hidden units
num_labels = 10;          % 10 labels, from 1 to 10   
load('traindata.mat');
m = size(X, 1);
X = double(X);
sel = randperm(size(X, 1));
sel = sel(1:100);
displayData(X(sel, :));


initial_Theta1 = randInitializeWeights(input_layer_size, hidden_layer_size);%随机初始化权重
initial_Theta2 = randInitializeWeights(hidden_layer_size, num_labels);

 initial_nn_params = [initial_Theta1(:) ; initial_Theta2(:)];
%  After you have completed the assignment, change the MaxIter to a larger
%  value to see how more training helps.
options = optimset('MaxIter', T);

%  You should also try different values of lambda
lambda = labda;

%%
%使用fmincg函数进行迭代优化迭代步数在100左右
% % Create "short hand" for the cost function to be minimized
% costFunction = @(p) nnCostFunction(p, ...
%                                    input_layer_size, ...
%                                    hidden_layer_size, ...
%                                    num_labels, X, y, lambda);
% 
% 
% [nn_params, cost] = fmincg(costFunction, initial_nn_params, options);


%%
%使用循环迭代，迭代步数在300左右
theta= initial_nn_params;
J_history = zeros(num_iters, 1);alpha=0.025;%设置学习率
for iter = 1:num_iters
         [J,grad] = nnCostFunction(theta, ...
                                   input_layer_size, ...
                                   hidden_layer_size, ...
                                   num_labels, ...
                                   X, y, lambda);
         J_history(iter)=J;
         fprintf('第%d次迭代，cost %f\n',iter,J);
         theta=theta-alpha*grad;
    % ============================================================
end


%%
Theta1 = reshape(theta(1:hidden_layer_size * (input_layer_size + 1)), ...
                 hidden_layer_size, (input_layer_size + 1));

Theta2 = reshape(theta((1 + (hidden_layer_size * (input_layer_size + 1))):end), ...
                 num_labels, (hidden_layer_size + 1));



load('testdata.mat');%使用测试集进行准确率测试
X = double(X);
sel = randperm(size(X, 1));
sel = sel(1:100);
displayData(X(sel, :));
% load('hgf.mat')
pred = predict(Theta1, Theta2, X);
fprintf('\nTest Set Accuracy: %f\n', mean(double(pred == Y)) * 100);
hpred=findobj('Tag','Accuracy');
set(hpred,'string',sprintf('%.2f%',mean(double(pred == Y)) * 100));
